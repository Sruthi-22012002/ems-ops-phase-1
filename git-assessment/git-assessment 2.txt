Git Assessment-2

1.	How do you rename the current branch you are on to a new-branch-name?  git rename -m current-branch-name old-branch-name
2.	What is the command to stash your changes and include untracked files?git stash -u
3.	How would you merge changes from the branch feature-new into your current branch?git add 
4.	What command do you use to view the differences between your working directory and the last commit?git diff
5.	Explain how to resolve a merge conflict that occurs during a git merge. What steps would you take?
	git status
	git add
	git commit -m
	git push -u
6.	Explain the purpose and use case of git rebase with an example. How does it differ from git merge?
	git rebase is a powerful tool for creating a clean commit history, making it easier to follow the evolution of a project. In contrast, git merge retains the 	complete branching context, which can be beneficial in certain scenarios. The choice between the two often comes down to team preferences and project 	requirements.
	10.	What is the difference between git pull --rebase and git pull? When would you prefer one over the other?
	git pull:

	Combines git fetch and git merge. It fetches changes from the remote branch and merges them into your current branch.
	Can create a merge commit if there are changes in both local and remote branches.
	git pull --rebase:

	Also combines git fetch but instead of merging, it re-applies your local commits on top of the fetched commits.
	Produces a linear history, making it cleaner and easier to follow.
	Preference:

	Use git pull --rebase when you want to maintain a clean commit history and avoid merge
11.	How can you view the changes made by a specific commit? What command do you use?
	git show <commit-hash>
12.	What is branch protection in Git, and why is it important for a collaborative development environment?
Branch protection is a feature that helps prevent changes to specific branches in a repository (e.g., main or master). It is important in collaborative 	development to ensure that critical branches are not modified inappropriately, which could lead to issues like broken builds or lost work.

13.	Explain how to set up branch protection rules in GitHub.
	Go to your GitHub repository.
	Click on the Settings tab.
	In the left sidebar, click Branches.
	Under "Branch protection rules," click Add rule.
	Specify the branch name pattern (e.g., main).
	Select the protection settings you want (e.g., require pull request reviews, enforce linear history).
	Click Create or Save changes.

14.	What happens if a user tries to push changes directly to a protected branch?
	If a user attempts to push changes directly to a protected branch, the push will be rejected by GitHub. The user will receive an error message indicating that they cannot push to that branch due to the protection rules in place.

15.	What is the purpose of a .gitignore file, and how do you create one? Provide an example of what you might include in it.

	The .gitignore file is used to specify files and directories that should be ignored by Git. This prevents sensitive information, build artifacts, and other unnecessary files from being tracked.
